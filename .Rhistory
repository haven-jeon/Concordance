encoding="UTF-8", span=3)
str_match
?str_match
concordance_str("<u who=\"P1\"><s n=\"01747\">나 그게 싫어서 정말.</s></u>", '검색', span=10)
is.na(concordance_str("<u who=\"P1\"><s n=\"01747\">나 그게 싫어서 정말.</s></u>", '검색', span=1)0)
is.na(concordance_str("<u who=\"P1\"><s n=\"01747\">나 그게 싫어서 정말.</s></u>", '검색', span=1)0)
is.na(concordance_str("<u who=\"P1\"><s n=\"01747\">나 그게 싫어서 정말.</s></u>", '검색', span=1))
str_match_all
str_match
a <- concordance_str("<u who=\"P1\"><s n=\"01747\">나 그게 싫어서 정말.</s></u>", '정말', span=10)
is.na(a)
a <- concordance_str("<u who=\"P1\"><s n=\"01747\">나 그게 싫어서 정말.</s></u>", '그렇지', span=10)
ㅁ
a
is.na(a)
which(is.na(a))
is.na(a) == TRUE
matrix()
concordance_file <- function(filename, pattern, encoding=getOption('encoding'), span=5){
f = file(filename, "r",encoding=encoding); on.exit(close(f), add = TRUE)
pattern <- knitr:::native_encode(pattern)
retu <- matrix()
while(TRUE) {
next_line = readLines(f, n = 1, warn=FALSE)
#print(next_line)
if(length(next_line) == 0) {
break
}
next_line <- knitr:::native_encode(next_line)
#print(Encoding(next_line))
ret <- concordance_str(next_line, pattern, span)
if(!is.na(ret)){
retu <- rbind(retu, ret)
}
#do.call("rbind",concordance_str(next_line, pattern, span)))
}
}
concordance_file("C:/Users/gogamza/Downloads/data_SJ/4CM00003.txt", '정말',
encoding="UTF-8", span=3)
concordance_file <- function(filename, pattern, encoding=getOption('encoding'), span=5){
f = file(filename, "r",encoding=encoding); on.exit(close(f), add = TRUE)
pattern <- knitr:::native_encode(pattern)
retu <- matrix()
while(TRUE) {
next_line = readLines(f, n = 1, warn=FALSE)
#print(next_line)
if(length(next_line) == 0) {
break
}
next_line <- knitr:::native_encode(next_line)
#print(Encoding(next_line))
ret <- concordance_str(next_line, pattern, span)
if(!is.na(ret)){
retu <- rbind(retu, ret)
}
#do.call("rbind",concordance_str(next_line, pattern, span)))
}
return(retu)
}
concordance_file("C:/Users/gogamza/Downloads/data_SJ/4CM00003.txt", '정말',
encoding="UTF-8", span=3)
concordance_file <- function(filename, pattern, encoding=getOption('encoding'), span=5){
f = file(filename, "r",encoding=encoding); on.exit(close(f), add = TRUE)
#pattern <- knitr:::native_encode(pattern)
retu <- matrix()
while(TRUE) {
next_line = readLines(f, n = 1, warn=FALSE)
#print(next_line)
if(length(next_line) == 0) {
break
}
#next_line <- knitr:::native_encode(next_line)
#print(Encoding(next_line))
ret <- concordance_str(next_line, pattern, span)
if(!is.na(ret)){
retu <- rbind(retu, ret)
}
#do.call("rbind",concordance_str(next_line, pattern, span)))
}
return(retu)
}
concordance_file("C:/Users/gogamza/Downloads/data_SJ/4CM00003.txt", '그럼',
encoding="UTF-8", span=3)
concordance_file("C:/Users/gogamza/Downloads/data_SJ/4CM00003.txt", '그럼',
encoding="UTF-8", span=2)
?exists
exists("retu")
exists("a")
concordance_file <- function(filename, pattern, encoding=getOption('encoding'), span=5){
f = file(filename, "r",encoding=encoding); on.exit(close(f), add = TRUE)
#pattern <- knitr:::native_encode(pattern)
retu <- matrix()
while(TRUE) {
next_line = readLines(f, n = 1, warn=FALSE)
#print(next_line)
if(length(next_line) == 0) {
break
}
#next_line <- knitr:::native_encode(next_line)
#print(Encoding(next_line))
ret <- concordance_str(next_line, pattern, span)
if(!is.na(ret)){
if(exists("retu")){
retu <- rbind(retu, ret)
}else{
retu <- ret
}
}
#do.call("rbind",concordance_str(next_line, pattern, span)))
}
return(retu)
}
concordance_file("C:/Users/gogamza/Downloads/data_SJ/4CM00003.txt", '그럼',
encoding="UTF-8", span=2)
concordance_file <- function(filename, pattern, encoding=getOption('encoding'), span=5){
f = file(filename, "r",encoding=encoding); on.exit(close(f), add = TRUE)
#pattern <- knitr:::native_encode(pattern)
while(TRUE) {
next_line = readLines(f, n = 1, warn=FALSE)
#print(next_line)
if(length(next_line) == 0) {
break
}
#next_line <- knitr:::native_encode(next_line)
#print(Encoding(next_line))
ret <- concordance_str(next_line, pattern, span)
if(!is.na(ret)){
if(exists("retu")){
retu <- rbind(retu, ret)
}else{
retu <- ret
}
}
#do.call("rbind",concordance_str(next_line, pattern, span)))
}
return(retu)
}
concordance_file("C:/Users/gogamza/Downloads/data_SJ/4CM00003.txt", '그럼',
encoding="UTF-8", span=2)
install.packages(c("foreign", "KernSmooth", "nnet", "rpart"))
install.packages("wordnet")
library(wordnet)
install.packages("RKEA")
library(rkea)
library(RKEA)
help(package="RKEA")
library(tm)
?Corpus
reut21578 <- system.file("texts", "crude", package = "tm")
readLines(reut21578)
reut21578
readLines("C:/R/R-2.15.3/library/tm/texts/crude/reut-00001.xml")
(r <- Corpus(DirSource(reut21578),
readerControl = list(reader = readReut21578XMLasPlain)))
r
head(r)
summary(r)
list(r)
list(r)[1]
list(r)[[1]]
as.vector(r)
?Corpus
inspect(r)
readReut21578XMLasPlain
library(tau)
help(package="tau")
help.search("concordance")
txt <- "The quick brown fox jumps over the lazy dog."
##
textcnt(txt, method = "ngram")
textcnt(txt, method = "string")
textcnt(txt, split = "", method = "string", n = 1L)
textcnt
textcnt("검은색 차량이 여기 오고 있다.", method = "string")
r <- textcnt(txt, method = "suffix", lower = 1L)
data.frame(counts = unclass(r), size = nchar(names(r)))
format(r)
r <- textcnt(txt, method = "suffix", lower = 1L)
ㄱ
r
r <- textcnt(txt, method = "prefix", lower = 1L)
r
r <- textcnt(txt, method = "ngram", lower = 1L)
r
txt
r <- textcnt(txt, method = "ngram")
r
txt
r <- textcnt(txt, split=" ")
r
r <- textcnt(txt)
r
txt
r <- textcnt(txt, n=2)
r
r <- textcnt(txt, n=2, method="string")
r
txt
r <- textcnt(txt, n=1, method="string")
r
r/10
r/sum(r)
sum(r/sum(r))
r/sum(r)
5821/37365
smoothing
help.search("smoothing")
help.search("good turing")
help.search("mutual information")
textcnt
txt <- readLines("C:/Users/gogamza/Downloads/data_SJ/4CM00003.txt", encoding="UTF-8")
head(txt)
unigram <- textcnt(tet, method="string", n=1)
unigram <- textcnt(txt, method="string", n=1)
head(unigram)
unigram
bigram <- textcnt(txt, method="string", n=2)
bigram
?textcnt
bigram <- textcnt(txt, method="string", n=2, decreasing=T)
bigram
head(bigram <- textcnt(text, method="string", n=2))
head(bigram)
bigram
install.packages("Combinations")
combn
combn(1:100, 2))
combn(1:100, 2)
combn(c("1", "2", "3"), 2)
num_of_words <- sum(unigram)
num_of_words
names(unigram)
unigram_prob <- unigram/num_of_words
unigram_prob
head(unigram_prob)
names(unigram_prob)
head(unigram_prob)
names(bigram)
strsplit(names(bigram),split=" ")
install.packages("XML")
library(tau)
txt <- readLines("C:/Users/gogamza/Downloads/data_SJ/4CM00003.txt", encoding="UTF-8")
unigram <- textcnt(txt, method="string", n=1)
bigram <- textcnt(txt, method="string", n=2)
num_of_words <- sum(unigram)
sapply(strsplit(names(bigram),split=" "), print)
log(2,2)
log(4,2)
num_of_bigrams <- sum(bigram)
head(bigram)
bigram['age s']
library(hash)
install.packages("hash")
library(hash)
help(package="hash")
hash(bigram)
strsplit(names(bigram)[1], split=" ")
unlist(strsplit(names(bigram)[1], split=" "))
x,y <- unlist(strsplit(names(bigram)[1], split=" "))
c(x,y) <- unlist(strsplit(names(bigram)[1], split=" "))
sapply(names(bigram), function(x) {
bi <- unlist(strsplit(x, split=" "))
log( (bigram[x]/num_of_bigrams)/(unigram(bi[1]) * unigram(bi[2])/(num_of_words^2)) )
})
sapply(names(bigram), function(x) {
bi <- unlist(strsplit(x, split=" "))
log( (bigram[x]/num_of_bigrams)/(unigram[bi[1]] * unigram[bi[2]]/(num_of_words^2)) )
})
sapply(names(bigram), function(x) {
bi <- unlist(strsplit(x, split=" "))
log( (bigram[x]/num_of_bigrams)/(unigram[bi[1]] * unigram[bi[2]]/(num_of_words^2)) )
}, USE.NAME=FALSE)
?sapply
sapply(names(bigram), function(x) {
bi <- unlist(strsplit(x, split=" "))
log( (bigram[x]/num_of_bigrams)/(unigram[bi[1]] * unigram[bi[2]]/(num_of_words^2)) )
}, USE.NAMES=FALSE)
a <- sapply(names(bigram), function(x) {
bi <- unlist(strsplit(x, split=" "))
log( (bigram[x]/num_of_bigrams)/(unigram[bi[1]] * unigram[bi[2]]/(num_of_words^2)) )
}, USE.NAMES=FALSE)
a[order(a, decreasing=T)]
head(a[order(a, decreasing=T)])
head(a[order(a, decreasing=T)], n=30)
uni <- hash(unigram)
uni
uni['힘들게']
uni['힘들게s']
library(hash)
collocations_str <- function(text){
unigram <- textcnt(text, method="string", n=1)
bigram <- textcnt(text, method="string", n=2)
num_of_words <- sum(unigram)
num_of_bigrams <- sum(bigram)
#calc mutual_information
sapply(names(bigram), function(x) {
bi <- unlist(strsplit(x, split=" "))
log( (bigram[x]/num_of_bigrams)/(unigram[bi[1]] * unigram[bi[2]]/(num_of_words^2)) )
}, USE.NAMES=FALSE)
}
collocations_str(txt)
head.search("mutual information")
help.search("mutual information")
help.search("mutualinformation")
mutualinformation <- function(text){
unigram <- textcnt(text, method="string", n=1)
bigram <- textcnt(text, method="string", n=2)
num_of_words <- sum(unigram)
num_of_bigrams <- sum(bigram)
#calc mutual_information
sapply(names(bigram), function(x) {
bi <- unlist(strsplit(x, split=" "))
log( (bigram[x]/num_of_bigrams)/(unigram[bi[1]] * unigram[bi[2]]/(num_of_words^2)) )
}, USE.NAMES=FALSE)
}
system.time({mutualinformation(txt)})
unigram <- hash(textcnt(txt, method="string", n=1))
sum(unigram)
as.list(unigram)
sum(as.list(unigram))
sum(as.vector(unigram))
vector(unigram)
invert(unigram)
values(unigram)
sum(values(unigram))
keys(bigram)
keys(unigram)
names(unigram)
mutualinformation2 <- function(text){
unigram <- hash(textcnt(text, method="string", n=1))
bigram <- hash(textcnt(text, method="string", n=2))
num_of_words <- sum(values(unigram))
num_of_bigrams <- sum(values(bigram))
#calc mutual_information
sapply(names(bigram), function(x) {
bi <- unlist(strsplit(x, split=" "))
log( (bigram[x]/num_of_bigrams)/(unigram[bi[1]] * unigram[bi[2]]/(num_of_words^2)) )
}, USE.NAMES=FALSE)
}
mutualinformation2(txt)
bigram[names(bigram)]
bigram[names(bigram)[1]]
unigram <- hash(textcnt(txt, method="string", n=1))
bigram <- hash(textcnt(txt, method="string", n=2))
num_of_words <- sum(values(unigram))
num_of_bigrams <- sum(values(bigram))
names(bigram)
sapply(names(bigram), function(x) {
bi <- unlist(strsplit(x, split=" "))
log( (bigram[x]/num_of_bigrams)/(unigram[bi[1]] * unigram[bi[2]]/(num_of_words^2)) )
}, USE.NAMES=FALSE)
num_of_bigrams
bigram['힘들어 s']
mutualinformation2 <- function(text){
unigram <- hash(textcnt(text, method="string", n=1))
bigram <- hash(textcnt(text, method="string", n=2))
num_of_words <- sum(values(unigram))
num_of_bigrams <- sum(values(bigram))
#calc mutual_information
sapply(names(bigram), function(x) {
bi <- unlist(strsplit(x, split=" "))
log( (bigram[[x]]/num_of_bigrams)/(unigram[[bi[1]]] * unigram[[bi[2]]]/(num_of_words^2)) )
}, USE.NAMES=FALSE)
}
system.time({mutualinformation2(txt)})
mutualinformation2(txt)
mutualinformation2 <- function(text){
unigram <- hash(textcnt(text, method="string", n=1))
bigram <- hash(textcnt(text, method="string", n=2))
num_of_words <- sum(values(unigram))
num_of_bigrams <- sum(values(bigram))
#calc mutual_information
sapply(names(bigram), function(x) {
bi <- unlist(strsplit(x, split=" "))
log( (bigram[[x]]/num_of_bigrams)/(unigram[[bi[1]]] * unigram[[bi[2]]]/(num_of_words^2)) )
}, USE.NAMES=TRUE)
}
mutualinformation2(txt)
a <- mutualinformation2(txt)
head(a[order(a, decreasing=T)])
textcnt
?match.arg
mutualinformation <- function(text, method=c("mutual", "tscores")){
unigram <- hash(textcnt(text, method="string", n=1))
bigram <- hash(textcnt(text, method="string", n=2))
num_of_words <- sum(values(unigram))
num_of_bigrams <- sum(values(bigram))
method <- match.arg(method)
if(method == "mutual"){
#calc mutual_information
sapply(names(bigram), function(x) {
bi <- unlist(strsplit(x, split=" "))
log( (bigram[[x]] * num_of_words)/(unigram[[bi[1]]] * unigram[[bi[2]]]) )
}, USE.NAMES=TRUE)
}else if(method == "tscores"){
#calc tscores
sapply(names(bigram), function(x) {
bi <- unlist(strsplit(x, split=" "))
log((bigram[[x]] - 1/num_of_words * unigram[[bi[1]]] * unigram[[bi[2]]]) /
sqrt(bigram[[x]]))
}, USE.NAMES=TRUE)
}
}
mutualinformation(txt)
mutualinformation <- function(text, method=c("mutual", "tscores")){
unigram <- hash(textcnt(text, method="string", n=1))
bigram <- hash(textcnt(text, method="string", n=2))
num_of_words <- sum(values(unigram))
num_of_bigrams <- sum(values(bigram))
method <- match.arg(method)
print(method)
if(method == "mutual"){
#calc mutual_information
sapply(names(bigram), function(x) {
bi <- unlist(strsplit(x, split=" "))
log( (bigram[[x]] * num_of_words)/(unigram[[bi[1]]] * unigram[[bi[2]]]) )
}, USE.NAMES=TRUE)
}else if(method == "tscores"){
#calc tscores
sapply(names(bigram), function(x) {
bi <- unlist(strsplit(x, split=" "))
log((bigram[[x]] - 1/num_of_words * unigram[[bi[1]]] * unigram[[bi[2]]]) /
sqrt(bigram[[x]]))
}, USE.NAMES=TRUE)
}
}
head(mutualinformation(txt))
head(mutualinformation(txt, method="tscores"))
warnings()
mutualinformation <- function(text, method=c("mutual", "tscores")){
unigram <- hash(textcnt(text, method="string", n=1))
bigram <- hash(textcnt(text, method="string", n=2))
num_of_words <- sum(values(unigram))
num_of_bigrams <- sum(values(bigram))
method <- match.arg(method)
print(method)
if(method == "mutual"){
#calc mutual_information
sapply(names(bigram), function(x) {
bi <- unlist(strsplit(x, split=" "))
log( (bigram[[x]] * num_of_words)/(unigram[[bi[1]]] * unigram[[bi[2]]]) )
}, USE.NAMES=TRUE)
}else if(method == "tscores"){
#calc tscores
sapply(names(bigram), function(x) {
bi <- unlist(strsplit(x, split=" "))
log((bigram[[x]] - 1/num_of_words * unigram[[bi[1]]] * unigram[[bi[2]]]) / sqrt(bigram[[x]]))
}, USE.NAMES=TRUE)
}
}
head(mutualinformation(txt, method="tscores"))
mutualinformation <- function(text, method=c("mutual", "tscores")){
unigram <- hash(textcnt(text, method="string", n=1))
bigram <- hash(textcnt(text, method="string", n=2))
num_of_words <- sum(values(unigram))
num_of_bigrams <- sum(values(bigram))
method <- match.arg(method)
print(method)
if(method == "mutual"){
#calc mutual_information
sapply(names(bigram), function(x) {
bi <- unlist(strsplit(x, split=" "))
log( (bigram[[x]] * num_of_words)/(unigram[[bi[1]]] * unigram[[bi[2]]]) )
}, USE.NAMES=TRUE)
}else if(method == "tscores"){
#calc tscores
sapply(names(bigram), function(x) {
bi <- unlist(strsplit(x, split=" "))
(bigram[[x]] - 1/num_of_words * unigram[[bi[1]]] * unigram[[bi[2]]]) / sqrt(bigram[[x]])
}, USE.NAMES=TRUE)
}
}
head(mutualinformation(txt, method="tscores"))
?filter
x <- 1:100
filter(x, rep(1, 3))
filter(x, rep(1, 2))
rep(1,2)
filter(x, rep(1, 5))
filter(x, rep(1, 5))
filter(x, rep(1, 3))
filter(presidents, rep(1, 3))
rep(1,200)
rep(1,200)/200
x <- 1:100
x
filter(x, rep(1, 3)
)
library(splines)
?ns
require(stats); require(graphics)
ns(women$height, df = 5)
ns(women$height, df = 5)
ns(women$height, df = 5)[,1]
plot(ns(women$height, df = 5)[,1])
plot(ns(women$height, df = 5)[,2])
plot(ns(women$height, df = 5)[,3])
plot(ns(women$height, df = 5)[,4])
plot(ns(women$height, df = 5)[,5])
plot(women$height)
install.packages("bootstrap")
library(bootstrap)
library(boot)
help(package="boot")
help(package="bootstrap")
set.seed(333); x <- rnorm(30); sampledMean <- rep(NA,1000)
for(i in 1:1000){sampledMean[i] <- mean(rnorm(30))}
meanFunc <- function(x,i){mean(x[i])}
bootMean <- boot(x,meanFunc,1000)
bootMean
plot(bootMean)
?boot
